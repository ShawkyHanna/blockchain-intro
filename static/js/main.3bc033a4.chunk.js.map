{"version":3,"sources":["blockchain/util/wallet.js","blockchain/util/hash.js","blockchain/block.js","blockchain/util/constants.js","components/Block.js","components/BlockchainBlock.js","components/Blockchain.js","components/Distributed.js","components/Header.js","components/Sha256Hash.js","components/Wallet.js","components/WalletSign.js","components/WalletVerify.js","components/WalletSignAndVerify.js","components/Transaction.js","components/TransactionsList.js","components/TransactionsBlock.js","components/Transactions.js","components/WalletTransactions/WalletWithTransactions.js","components/WalletTransactions/TransactionWallet.js","components/WalletTransactions/TransactionsListWallet.js","components/WalletTransactions/WalletSignWithTransactions.js","components/WalletTransactions/WalletVerifyWithTransactions.js","components/WalletTransactions/WalletSignAndVerifyWithTransactions.js","components/BlockchainWithWallet/PrivateKeyModal.js","components/BlockchainWithWallet/Transaction.js","components/BlockchainWithWallet/TransactionsList.js","components/BlockchainWithWallet/TransactionsBlock.js","components/BlockchainWithWallet/TransactionsWallet.js","App.js","index.js"],"names":["init","EC","elliptic","ec","getSecp256Keys","keyPair","genKeyPair","publicKey","getPublic","privateKey","getPrivate","signTransaction","data","secp256k1","hashedData","hashData","sign","keyFromPrivate","toDER","Buffer","toString","verifyTransaction","signature","keyFromPublic","verify","console","log","sha256Hash","input","hash","crypto","createHash","update","digest","hashBlock","blockNumber","nonce","previousHash","JSON","stringify","mineBlock","substring","repeat","Block","useState","setBlockNumber","setNonce","setData","sha256","setSha256","isValid","setIsValid","useEffect","checkIsValid","maxW","mt","mb","bg","padding","borderRadius","value","onChange","e","Number","target","colorScheme","onClick","BlockchainBlock","updateChainValue","node","my","minW","Blockchain","useImmer","chain","setChain","fieldName","fieldValue","draft","overflowX","templateColumns","map","block","previousHashValue","Distributed","toggleChain","setToggleChain","validChain","length","c","getBlockchainBlocks","blockchain","index","lastBlock","hashCount","reduce","acc","cur","validHash","Object","keys","Header","MenuItems","children","link","mr","href","as","justify","color","align","size","display","alignItems","Sha256Hash","formData","Wallet","updateWalletData","setPublicKey","setPrivateKey","undefined","pointerEvents","Unlock","Lock","rightIcon","Link","WalletSign","walletData","WalletVerify","signResult","WalletSignAndVerify","isSignatureValid","setWalletData","field","Transaction","updateValue","transaction","amount","to","from","id","spacing","fontSize","placeholder","TransactionsList","updateTransactionValue","transactions","name","p","TransactionsBlock","Transactions","transactionId","WalletWithTransactions","TransactionWallet","TransactionsListWallet","WalletSignWithTransactions","WalletVerifyWithTransactions","WalletSignAndVerifyWithTransactions","PrivateKeyModal","isOpen","onClose","onOpen","initialRef","useRef","initialFocusRef","ref","tempTransaction","signed","useDisclosure","isSignetureValid","setIsSignetureValid","result","leftIcon","find","TransactionsWallet","App","path","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3bc033a4.chunk.js","sourcesContent":["import elliptic from 'elliptic';\nimport { hashData } from './hash';\n\nfunction init() {\n  const EC = elliptic.ec;\n  const secp256k1 = new EC('secp256k1');\n  return secp256k1;\n}\n\nexport function getSecp256Keys() {\n  const secp256k1 = init();\n  const keyPair = secp256k1.genKeyPair();\n  const publicKey = keyPair.getPublic('hex');\n  const privateKey = keyPair.getPrivate('hex');\n  return { publicKey, privateKey };\n}\n\nexport function signTransaction(privateKey, data) {\n  const secp256k1 = init();\n  const hashedData = hashData(data);\n  const keypair = secp256k1.keyFromPrivate(privateKey);\n  const sign = keypair.sign(hashedData).toDER();\n  const buffer = Buffer(sign).toString('hex');\n  return buffer;\n}\n\nexport function verifyTransaction({ publicKey, data, signature }) {\n  const secp256k1 = init();\n  const hashedData = hashData(data);\n  try {\n    const key = secp256k1.keyFromPublic(publicKey, 'hex');\n    const isValid = key.verify(hashedData, signature);\n    return isValid;\n  } catch {\n    console.log('Invalid Signature');\n    return false;\n  }\n}\n","import crypto from 'crypto';\n\nexport function sha256Hash(input) {\n  const hash = crypto.createHash('sha256');\n  hash.update(input);\n  return hash.digest('hex');\n}\n\nexport function hashBlock({ blockNumber, nonce, data, previousHash }) {\n  const blockString = JSON.stringify({\n    blockNumber,\n    nonce,\n    data,\n    previousHash,\n  });\n  const blockHash = sha256Hash(blockString);\n  return blockHash;\n}\n\nexport function hashData(data) {\n  const dataString = JSON.stringify(data);\n  const dataHash = sha256Hash(dataString);\n  return dataHash;\n}\n","import { DIFICULTY } from './util/constants';\nimport { hashBlock } from './util/hash';\n\nexport function mineBlock({ blockNumber, data, previousHash }) {\n  let nonce = 0;\n  let hashedData;\n  do {\n    nonce++;\n    hashedData = hashBlock({ blockNumber, nonce, data, previousHash });\n  } while (hashedData.substring(0, DIFICULTY) !== '0'.repeat(DIFICULTY));\n  return { hashedData, nonce };\n}\n","export const DIFICULTY = 4;\n","import { Button } from '@chakra-ui/button';\nimport { Input } from '@chakra-ui/input';\nimport { Container } from '@chakra-ui/layout';\nimport { Box } from '@chakra-ui/layout';\nimport { Text } from '@chakra-ui/layout';\nimport { Heading } from '@chakra-ui/layout';\nimport { Textarea } from '@chakra-ui/textarea';\nimport React, { useEffect, useState } from 'react';\nimport { mineBlock } from '../blockchain/block';\nimport { DIFICULTY } from '../blockchain/util/constants';\nimport { hashBlock } from '../blockchain/util/hash';\n\nfunction Block() {\n  const [blockNumber, setBlockNumber] = useState(1);\n  const [nonce, setNonce] = useState(0);\n  const [data, setData] = useState('');\n  const [sha256, setSha256] = useState();\n  const [isValid, setIsValid] = useState(false);\n  useEffect(() => {\n    const hashedData = hashBlock({ blockNumber, nonce, data });\n    const checkIsValid =\n      hashedData.substring(0, DIFICULTY) === '0'.repeat(DIFICULTY);\n    setIsValid(checkIsValid);\n    setSha256(hashedData);\n  }, [blockNumber, nonce, data]);\n  function handleMine() {\n    const { hashedData, nonce } = mineBlock({ blockNumber, data });\n    setNonce(nonce);\n    setSha256(hashedData);\n  }\n  return (\n    <Container maxW='80%' mt='6'>\n      <Heading mb='10'>Block</Heading>\n      <Box bg={isValid ? 'green.100' : 'red.100'} padding='6' borderRadius='md'>\n        <Text>Block Number:</Text>\n        <Input\n          bg='white'\n          mb='6'\n          value={blockNumber}\n          onChange={(e) => {\n            setBlockNumber(Number(e.target.value));\n          }}\n        />\n        <Text>nonce:</Text>\n        <Input\n          bg='white'\n          mb='6'\n          value={nonce}\n          onChange={(e) => {\n            setNonce(Number(e.target.value));\n          }}\n        />\n        <Text>Data:</Text>\n        <Textarea\n          bg='white'\n          mb='2'\n          onChange={(e) => {\n            setData(e.target.value);\n          }}\n        />\n        <Text>Hash:</Text>\n        <Input bg='white' mb='6' value={sha256} />\n        <Button colorScheme='blue' onClick={handleMine}>\n          Mine\n        </Button>\n      </Box>\n    </Container>\n  );\n}\n\nexport default Block;\n","import { Button } from '@chakra-ui/button';\nimport { Input } from '@chakra-ui/input';\nimport { Container } from '@chakra-ui/layout';\nimport { Box } from '@chakra-ui/layout';\nimport { Text } from '@chakra-ui/layout';\nimport { Heading } from '@chakra-ui/layout';\nimport { Textarea } from '@chakra-ui/textarea';\nimport React, { useEffect, useState } from 'react';\nimport { mineBlock } from '../blockchain/block';\nimport { DIFICULTY } from '../blockchain/util/constants';\nimport { hashBlock } from '../blockchain/util/hash';\n\nfunction BlockchainBlock({\n  blockNumber,\n  nonce,\n  data,\n  previousHash,\n  hash,\n  updateChainValue,\n  node,\n}) {\n  const [isValid, setIsValid] = useState(false);\n  useEffect(() => {\n    const hashedData = hashBlock({ blockNumber, nonce, data, previousHash });\n    const checkIsValid =\n      hashedData.substring(0, DIFICULTY) === '0'.repeat(DIFICULTY);\n    setIsValid(checkIsValid);\n    updateChainValue(blockNumber, 'hash', hashedData, node);\n  }, [blockNumber, nonce, data, previousHash]);\n  function handleMine() {\n    const { hashedData, nonce } = mineBlock({\n      blockNumber,\n      data,\n      previousHash,\n    });\n    updateChainValue(blockNumber, 'nonce', nonce, node);\n    updateChainValue(blockNumber, 'hash', hashedData, node);\n  }\n  return (\n    <Container maxW='80%' my='6' minW='500'>\n      <Box bg={isValid ? 'green.100' : 'red.100'} padding='6' borderRadius='md'>\n        <Text>Block Number:</Text>\n        <Input bg='white' mb='6' value={blockNumber} />\n        <Text>nonce:</Text>\n        <Input\n          bg='white'\n          mb='6'\n          value={nonce}\n          onChange={(e) => {\n            updateChainValue(blockNumber, 'nonce', e.target.value, node);\n          }}\n        />\n        <Text>Data:</Text>\n        <Textarea\n          bg='white'\n          mb='2'\n          onChange={(e) => {\n            updateChainValue(blockNumber, 'data', e.target.value, node);\n          }}\n          value={data}\n        />\n        <Text>Previous hash:</Text>\n        <Input\n          bg='white'\n          mb='6'\n          value={previousHash}\n          onChange={(e) => {\n            updateChainValue(blockNumber, 'previousHash', e.target.value, node);\n          }}\n        />\n        <Text>Hash:</Text>\n        <Input bg='white' mb='6' value={hash} />\n        <Button colorScheme='blue' onClick={handleMine}>\n          Mine\n        </Button>\n      </Box>\n    </Container>\n  );\n}\n\nexport default BlockchainBlock;\n","import { Heading } from '@chakra-ui/layout';\nimport { Grid } from '@chakra-ui/layout';\nimport React from 'react';\nimport { useImmer } from 'use-immer';\nimport BlockchainBlock from './BlockchainBlock';\n\nfunction Blockchain() {\n  const [chain, setChain] = useImmer([\n    {\n      blockNumber: 0,\n      nonce: 19204,\n      data: 'Genesis Block',\n      previousHash: '0'.repeat(64),\n      hash: '000',\n    },\n    {\n      blockNumber: 1,\n      nonce: 34402,\n      data: 'Another block',\n      previousHash: '',\n      hash: '123',\n    },\n    {\n      blockNumber: 2,\n      nonce: 25790,\n      data: 'Final block',\n      previousHash: '',\n      hash: '123',\n    },\n  ]);\n\n  function updateChainValue(blockNumber, fieldName, fieldValue) {\n    setChain((draft) => {\n      draft[blockNumber][fieldName] = fieldValue;\n    });\n  }\n\n  function getBlockchainBlocks() {\n    return chain.map((block) => {\n      if (block.blockNumber === 0) {\n        return (\n          <BlockchainBlock {...block} updateChainValue={updateChainValue} />\n        );\n      }\n      const previousHashValue = chain[block.blockNumber - 1].hash;\n      return (\n        <BlockchainBlock\n          {...block}\n          previousHash={previousHashValue}\n          updateChainValue={updateChainValue}\n        />\n      );\n    });\n  }\n  return (\n    <>\n      <Heading mb='10' mt='10'>\n        Blockchain\n      </Heading>\n\n      <Grid maxW='100%' overflowX='scroll' templateColumns='repeat(5, 1fr)'>\n        {getBlockchainBlocks()}\n      </Grid>\n    </>\n  );\n}\n\nexport default Blockchain;\n","import { Heading } from '@chakra-ui/layout';\nimport { Grid } from '@chakra-ui/layout';\nimport React, { useEffect, useState } from 'react';\nimport { useImmer } from 'use-immer';\nimport BlockchainBlock from './BlockchainBlock';\n\nfunction Distributed() {\n  const [toggleChain, setToggleChain] = useState(true);\n  const [chain, setChain] = useImmer([\n    [\n      {\n        blockNumber: 0,\n        nonce: 19204,\n        data: 'Genesis Block',\n        previousHash: '0'.repeat(64),\n        hash: '000',\n        validChain: true,\n      },\n      {\n        blockNumber: 1,\n        nonce: 34402,\n        data: 'Another block',\n        previousHash: '',\n        hash: '123',\n        validChain: true,\n      },\n      {\n        blockNumber: 2,\n        nonce: 25790,\n        data: 'Final block',\n        previousHash: '',\n        hash: '123',\n        validChain: true,\n      },\n    ],\n    [\n      {\n        blockNumber: 0,\n        nonce: 19204,\n        data: 'Genesis Block',\n        previousHash: '0'.repeat(64),\n        hash: '000',\n        validChain: true,\n      },\n      {\n        blockNumber: 1,\n        nonce: 34402,\n        data: 'Another block',\n        previousHash: '',\n        hash: '123',\n        validChain: true,\n      },\n      {\n        blockNumber: 2,\n        nonce: 25790,\n        data: 'Final block',\n        previousHash: '',\n        hash: '123',\n        validChain: true,\n      },\n    ],\n    [\n      {\n        blockNumber: 0,\n        nonce: 19204,\n        data: 'Genesis Block',\n        previousHash: '0'.repeat(64),\n        hash: '000',\n        validChain: true,\n      },\n      {\n        blockNumber: 1,\n        nonce: 34402,\n        data: 'Another block',\n        previousHash: '',\n        hash: '123',\n        validChain: true,\n      },\n      {\n        blockNumber: 2,\n        nonce: 25790,\n        data: 'Final block',\n        previousHash: '',\n        hash: '123',\n        validChain: true,\n      },\n    ],\n  ]);\n\n  useEffect(() => {\n    const lastBlock = chain[0].length - 1;\n    var hashCount = chain.reduce((acc, cur) => {\n      acc[cur[lastBlock]['hash']] = (acc[cur[lastBlock]['hash']] || 0) + 1;\n      return acc;\n    }, {});\n\n    const validHash = Object.keys(hashCount).reduce((acc, value) =>\n      hashCount[acc] > hashCount[value] ? acc : value\n    );\n\n    chain.map((blockchain, node) => {\n      const isValid = blockchain[lastBlock].hash === validHash;\n      setChain((draft) => {\n        draft[node][lastBlock].validChain = isValid;\n      });\n    });\n  }, [toggleChain]);\n\n  function updateChainValue(blockNumber, fieldName, fieldValue, node) {\n    setChain((draft) => {\n      draft[node][blockNumber][fieldName] = fieldValue;\n    });\n    if (fieldName === 'hash') {\n      //\"1234...\": 1;\n      //\"2345...\": 2\n      if (blockNumber === chain[node].length - 1) {\n        setToggleChain((c) => !c);\n      }\n    }\n  }\n\n  function getBlockchainBlocks(blockchain, index) {\n    return blockchain.map((block) => {\n      if (block.blockNumber === 0) {\n        return (\n          <BlockchainBlock\n            {...block}\n            updateChainValue={updateChainValue}\n            node={index}\n          />\n        );\n      }\n      const previousHashValue = chain[index][block.blockNumber - 1].hash;\n      return (\n        <BlockchainBlock\n          {...block}\n          previousHash={previousHashValue}\n          updateChainValue={updateChainValue}\n          node={index}\n        />\n      );\n    });\n  }\n  return (\n    <>\n      {chain.map((blockchain, index) => {\n        return (\n          <>\n            <Heading my='5'>Node {index}</Heading>\n            <Grid\n              bg={\n                blockchain[blockchain.length - 1].validChain\n                  ? 'white'\n                  : 'red.500'\n              }\n              maxW='100%'\n              overflowX='scroll'\n              templateColumns='repeat(5, 1fr)'\n            >\n              {getBlockchainBlocks(blockchain, index)}\n            </Grid>\n          </>\n        );\n      })}\n    </>\n  );\n}\n\nexport default Distributed;\n","import { Heading } from '@chakra-ui/layout';\nimport { Text } from '@chakra-ui/layout';\nimport { Link } from '@chakra-ui/layout';\nimport { Spacer } from '@chakra-ui/layout';\nimport { Box } from '@chakra-ui/layout';\nimport { Flex } from '@chakra-ui/layout';\nimport React from 'react';\n\nfunction Header() {\n  function MenuItems({ children, link }) {\n    return (\n      <Text mr={6}>\n        <Link href={link}>{children}</Link>\n      </Text>\n    );\n  }\n  return (\n    <Flex\n      as='nav'\n      justify='center'\n      padding='2.5'\n      bg='gray.800'\n      color='gray.100'\n    >\n      <Flex align='center' mr={5}>\n        <Heading as='h1' size='lg'>\n          Blockchain viewer\n        </Heading>\n      </Flex>\n      <Spacer />\n      <Box display='flex' alignItems='center'>\n        <MenuItems link='/sha256'>SHA256</MenuItems>\n        <MenuItems link='/block'>Block</MenuItems>\n        <MenuItems link='/blockchain'>Blockchain</MenuItems>\n        <MenuItems link='/distributed'>Distributed</MenuItems>\n        <MenuItems link='/transactions'>Transactions</MenuItems>\n        <MenuItems link='/wallet'>Wallet</MenuItems>\n        <MenuItems link='/signed'>Signed</MenuItems>\n        <MenuItems link='/wallet-transactions'>Wallet-Transactions</MenuItems>\n        <MenuItems link='/transactions-wallet'>\n          Transactions with Wallet\n        </MenuItems>\n      </Box>\n    </Flex>\n  );\n}\n\nexport default Header;\n","import { Button } from '@chakra-ui/button';\nimport { Input } from '@chakra-ui/input';\nimport { Container } from '@chakra-ui/layout';\nimport { Box } from '@chakra-ui/layout';\nimport { Text } from '@chakra-ui/layout';\nimport { Heading } from '@chakra-ui/layout';\nimport { Textarea } from '@chakra-ui/textarea';\nimport React, { useEffect, useState } from 'react';\nimport { sha256Hash } from '../blockchain/util/hash';\n\nfunction Sha256Hash() {\n  const [data, setData] = useState('');\n  const [sha256, setSha256] = useState();\n  useEffect(() => {\n    const hashedData = sha256Hash(data);\n    setSha256(hashedData);\n  }, [data]);\n\n  function updateData(e) {\n    const formData = e.target.value;\n    setData(formData);\n  }\n\n  return (\n    <Container maxW='80%' mt='6'>\n      <Heading mb='10'>SHA256 Hash</Heading>\n      <Box bg='green.100' padding='6' borderRadius='md'>\n        <Text>Data:</Text>\n        <Textarea bg='white' mb='2' onChange={updateData} />\n        <Text>SHA256:</Text>\n        <Input bg='white' mb='6' value={sha256} />\n        <Button colorScheme='blue'>Calculate SHA256</Button>\n      </Box>\n    </Container>\n  );\n}\n\nexport default Sha256Hash;\n","import { Button } from '@chakra-ui/button';\nimport { LinkIcon, LockIcon, UnlockIcon } from '@chakra-ui/icons';\nimport { InputLeftElement } from '@chakra-ui/input';\nimport { InputGroup } from '@chakra-ui/input';\nimport { Input } from '@chakra-ui/input';\nimport { Container } from '@chakra-ui/layout';\nimport { Box } from '@chakra-ui/layout';\nimport { Text } from '@chakra-ui/layout';\nimport { Heading } from '@chakra-ui/layout';\nimport React, { useEffect, useState } from 'react';\nimport { getSecp256Keys } from '../blockchain/util/wallet';\n\nfunction Wallet({ updateWalletData }) {\n  const [publicKey, setPublicKey] = useState('');\n  const [privateKey, setPrivateKey] = useState('');\n\n  useEffect(() => {\n    if (updateWalletData === undefined) return;\n    updateWalletData('publicKey', publicKey);\n    updateWalletData('privateKey', privateKey);\n  }, [publicKey, privateKey]);\n\n  function handleCreateWallet() {\n    const { publicKey, privateKey } = getSecp256Keys();\n    console.log('publicKey: ', publicKey);\n    console.log('privateKey: ', privateKey);\n    setPublicKey(publicKey);\n    setPrivateKey(privateKey);\n  }\n\n  return (\n    <Container maxW='80%' mt='3'>\n      <Heading mb='3'>Wallet</Heading>\n      <Box bg='green.100' padding='6' borderRadius='md'>\n        <Text>Public Key:</Text>\n        <InputGroup>\n          <InputLeftElement\n            pointerEvents='none'\n            children={<UnlockIcon color='gray.300' />}\n          />\n          <Input bg='white' mb='2' value={publicKey} />\n        </InputGroup>\n        <Text>Private Key:</Text>\n        <InputGroup>\n          <InputLeftElement\n            pointerEvents='none'\n            children={<LockIcon color='gray.300' />}\n          />\n          <Input bg='white' mb='2' value={privateKey} />\n        </InputGroup>\n        <Button\n          colorScheme='blue'\n          rightIcon={<LinkIcon />}\n          onClick={handleCreateWallet}\n        >\n          Create Wallet\n        </Button>\n      </Box>\n    </Container>\n  );\n}\n\nexport default Wallet;\n","import { Button } from '@chakra-ui/button';\nimport { Input } from '@chakra-ui/input';\nimport { Container } from '@chakra-ui/layout';\nimport { Box } from '@chakra-ui/layout';\nimport { Text } from '@chakra-ui/layout';\nimport { Heading } from '@chakra-ui/layout';\nimport { Textarea } from '@chakra-ui/textarea';\nimport React, { useState } from 'react';\nimport { signTransaction } from '../blockchain/util/wallet';\n\nfunction WalletSign({ walletData, updateWalletData }) {\n  const [data, setData] = useState('');\n\n  function handleSignTransaction() {\n    const sign = signTransaction(walletData.privateKey, data);\n    console.log('sign', sign);\n    updateWalletData('signature', sign);\n  }\n\n  return (\n    <Container maxW='80%' mt='3'>\n      <Heading mb='3'>Sign Transaction</Heading>\n      <Box bg='green.100' padding='6' borderRadius='md'>\n        <Text>Data:</Text>\n        <Textarea\n          bg='white'\n          mb='2'\n          onChange={(e) => setData(e.target.value)}\n          value={data}\n        />\n        <Text>Private Key:</Text>\n        <Input bg='white' mb='2' value={walletData.privateKey} />\n        <Button colorScheme='blue' onClick={handleSignTransaction}>\n          Sign Transaction\n        </Button>\n        <Text mt='2'>Signature:</Text>\n        <Input bg='white' mb='2' value={walletData.signature} />\n      </Box>\n    </Container>\n  );\n}\n\nexport default WalletSign;\n","import { Button } from '@chakra-ui/button';\nimport { Input } from '@chakra-ui/input';\nimport { Container } from '@chakra-ui/layout';\nimport { Box } from '@chakra-ui/layout';\nimport { Text } from '@chakra-ui/layout';\nimport { Heading } from '@chakra-ui/layout';\nimport { Textarea } from '@chakra-ui/textarea';\nimport React, { useEffect, useState } from 'react';\nimport { sha256Hash } from '../blockchain/util/hash';\nimport { verifyTransaction } from '../blockchain/util/wallet';\n\nfunction WalletVerify({ walletData, updateWalletData }) {\n  const [data, setData] = useState('');\n  const [isValid, setIsValid] = useState(false);\n\n  function updateData(e) {\n    const formData = e.target.value;\n    setData(formData);\n  }\n\n  function handleVerify() {\n    const signResult = verifyTransaction({\n      data,\n      publicKey: walletData.publicKey,\n      signature: walletData.signature,\n    });\n    setIsValid(signResult);\n  }\n\n  return (\n    <Container maxW='80%' mt='3'>\n      <Heading mb='3'>Verify Transaction</Heading>\n      <Box bg={isValid ? 'green.100' : 'red.100'} padding='6' borderRadius='md'>\n        <Text>Data:</Text>\n        <Textarea bg='white' mb='2' onChange={updateData} />\n        <Text>Public Key:</Text>\n        <Input\n          bg='white'\n          mb='2'\n          value={walletData.publicKey}\n          onChange={(e) => updateWalletData('publicKey', e.target.value)}\n        />\n        <Text>Signature:</Text>\n        <Input\n          bg='white'\n          mb='2'\n          value={walletData.signature}\n          onChange={(e) => updateWalletData('signature', e.target.value)}\n        />\n        <Button colorScheme='blue' onClick={handleVerify}>\n          Verify Signature\n        </Button>\n      </Box>\n    </Container>\n  );\n}\n\nexport default WalletVerify;\n","import { Container } from '@chakra-ui/layout';\nimport React from 'react';\nimport { useImmer } from 'use-immer';\nimport Wallet from './Wallet';\nimport WalletSign from './WalletSign';\nimport WalletVerify from './WalletVerify';\n\nfunction WalletSignAndVerify() {\n  const [walletData, setWalletData] = useImmer({\n    publicKey: '',\n    privateKey: '',\n    data: '',\n    signature: '',\n    isSignatureValid: false,\n  });\n  function updateWalletData(field, value) {\n    setWalletData((draft) => {\n      draft[field] = value;\n    });\n  }\n  return (\n    <>\n      <Wallet updateWalletData={updateWalletData} />\n      <WalletSign walletData={walletData} updateWalletData={updateWalletData} />\n      <WalletVerify\n        walletData={walletData}\n        updateWalletData={updateWalletData}\n      />\n    </>\n  );\n}\n\nexport default WalletSignAndVerify;\n","import React from 'react';\nimport { Input } from '@chakra-ui/input';\nimport { InputLeftElement } from '@chakra-ui/input';\nimport { InputGroup } from '@chakra-ui/input';\nimport { HStack } from '@chakra-ui/layout';\nimport { StatDownArrow } from '@chakra-ui/stat';\nimport { StatUpArrow } from '@chakra-ui/stat';\n\nfunction Transaction({ updateValue, transaction }) {\n  const { amount, to, from, id } = transaction;\n  return (\n    <HStack spacing='1'>\n      <InputGroup>\n        <InputLeftElement\n          pointerEvents='none'\n          color='gray.300'\n          fontSize='1.2em'\n          children='$'\n        />\n        <Input\n          placeholder='Amount'\n          value={amount}\n          onChange={(e) => updateValue(id, 'amount', Number(e.target.value))}\n        />\n      </InputGroup>\n      <InputGroup>\n        <InputLeftElement\n          pointerEvents='none'\n          color='gray.300'\n          fontSize='1.2em'\n          children={<StatUpArrow color='gray.300' />}\n        />\n        <Input\n          placeholder='from'\n          value={from}\n          onChange={(e) => updateValue(id, 'from', e.target.value)}\n        />\n      </InputGroup>\n      <InputGroup>\n        <InputLeftElement\n          pointerEvents='none'\n          color='gray.300'\n          fontSize='1.2em'\n          children={<StatDownArrow color='gray.300' />}\n        />\n        <Input\n          placeholder='to'\n          value={to}\n          onChange={(e) => updateValue(id, 'to', e.target.value)}\n        />\n      </InputGroup>\n    </HStack>\n  );\n}\n\nexport default Transaction;\n","import { Box } from '@chakra-ui/layout';\nimport React, { useEffect } from 'react';\nimport Transaction from './Transaction';\n\nfunction TransactionsList({\n  updateTransactionValue,\n  blockNumber,\n  transactions,\n}) {\n  function updateValue(id, name, value) {\n    updateTransactionValue(blockNumber, id, name, value);\n  }\n  return (\n    <Box bg='white' borderRadius='md' p='1'>\n      {transactions.map((transaction) => (\n        <Transaction transaction={transaction} updateValue={updateValue} />\n      ))}\n    </Box>\n  );\n}\n\nexport default TransactionsList;\n","import { Button } from '@chakra-ui/button';\nimport { Input } from '@chakra-ui/input';\nimport { Container } from '@chakra-ui/layout';\nimport { Box } from '@chakra-ui/layout';\nimport { Text } from '@chakra-ui/layout';\nimport { Heading } from '@chakra-ui/layout';\nimport { Textarea } from '@chakra-ui/textarea';\nimport React, { useEffect, useState } from 'react';\nimport { mineBlock } from '../blockchain/block';\nimport { DIFICULTY } from '../blockchain/util/constants';\nimport { hashBlock } from '../blockchain/util/hash';\nimport TransactionsList from './TransactionsList';\n\nfunction TransactionsBlock({\n  blockNumber,\n  nonce,\n  data,\n  previousHash,\n  hash,\n  updateChainValue,\n  node,\n  updateTransactionValue,\n}) {\n  const [isValid, setIsValid] = useState(false);\n  useEffect(() => {\n    const hashedData = hashBlock({ blockNumber, nonce, data, previousHash });\n    const checkIsValid =\n      hashedData.substring(0, DIFICULTY) === '0'.repeat(DIFICULTY);\n    setIsValid(checkIsValid);\n    updateChainValue(blockNumber, 'hash', hashedData, node);\n  }, [blockNumber, nonce, data, previousHash]);\n  function handleMine() {\n    const { hashedData, nonce } = mineBlock({\n      blockNumber,\n      data,\n      previousHash,\n    });\n    updateChainValue(blockNumber, 'nonce', nonce, node);\n    updateChainValue(blockNumber, 'hash', hashedData, node);\n  }\n  return (\n    <Container maxW='80%' my='6' minW='500'>\n      <Box bg={isValid ? 'green.100' : 'red.100'} padding='6' borderRadius='md'>\n        <Text>Block Number #:</Text>\n        <Input bg='white' mb='6' value={blockNumber} />\n        <Text>nonce:</Text>\n        <Input\n          bg='white'\n          mb='6'\n          value={nonce}\n          onChange={(e) => {\n            updateChainValue(blockNumber, 'nonce', e.target.value, node);\n          }}\n        />\n        <Text>Transactions:</Text>\n        <TransactionsList\n          transactions={data}\n          blockNumber={blockNumber}\n          updateTransactionValue={updateTransactionValue}\n        />\n        {/* <Textarea\n          bg='white'\n          mb='2'\n          onChange={(e) => {\n            updateChainValue(blockNumber, 'data', e.target.value, node);\n          }}\n          value={data}\n        /> */}\n        <Text>Previous hash:</Text>\n        <Input\n          bg='white'\n          mb='6'\n          value={previousHash}\n          onChange={(e) => {\n            updateChainValue(blockNumber, 'previousHash', e.target.value, node);\n          }}\n        />\n        <Text>Hash:</Text>\n        <Input bg='white' mb='6' value={hash} />\n        <Button colorScheme='blue' onClick={handleMine}>\n          Mine\n        </Button>\n      </Box>\n    </Container>\n  );\n}\n\nexport default TransactionsBlock;\n","import { Heading } from '@chakra-ui/layout';\nimport { Grid } from '@chakra-ui/layout';\nimport React from 'react';\nimport { useImmer } from 'use-immer';\nimport TransactionsBlock from './TransactionsBlock';\n\nfunction Transactions() {\n  const [chain, setChain] = useImmer([\n    {\n      blockNumber: 0,\n      nonce: 13966,\n      data: [\n        {\n          id: 0,\n          amount: 10,\n          from: 'me',\n          to: 'you',\n        },\n        {\n          id: 1,\n          amount: 5,\n          from: 'you',\n          to: 'me',\n        },\n        {\n          id: 2,\n          amount: 1,\n          from: 'me',\n          to: 'you',\n        },\n      ],\n      previousHash: '0'.repeat(64),\n      hash: '000032ac7852203819adbcafd1ae54ee51968ffafa6c5468d2e6655c4c777e1d',\n    },\n    {\n      blockNumber: 1,\n      nonce: 161732,\n      data: [\n        {\n          id: 0,\n          amount: 9,\n          from: 'Icaro',\n          to: 'Nicolas',\n        },\n        {\n          id: 1,\n          amount: 1,\n          from: 'Nicolas',\n          to: 'Icaro',\n        },\n        {\n          id: 2,\n          amount: 12,\n          from: 'me',\n          to: 'you',\n        },\n      ],\n      previousHash: '',\n      hash: '0000b069cf12069fc3c27e4d2d0d7a178eb3a75df45c0e99a7a9234c77d4acce',\n    },\n    {\n      blockNumber: 2,\n      nonce: 7122,\n      data: [\n        {\n          id: 0,\n          amount: 7,\n          from: 'Rafaela',\n          to: 'Nicolas',\n        },\n        {\n          id: 1,\n          amount: 6,\n          from: 'Rafaela',\n          to: 'Icaro',\n        },\n        {\n          id: 2,\n          amount: 13,\n          from: 'me',\n          to: 'you',\n        },\n      ],\n      previousHash: '',\n      hash: '0000c729ba6c40884f17e4307f808515efc18c15716f445a26780242c93665ae',\n    },\n  ]);\n\n  function updateChainValue(blockNumber, fieldName, fieldValue) {\n    if (\n      JSON.stringify(chain[blockNumber][fieldName]) ===\n      JSON.stringify(fieldValue)\n    ) {\n      return;\n    }\n    setChain((draft) => {\n      draft[blockNumber][fieldName] = fieldValue;\n    });\n  }\n\n  function updateTransactionValue(\n    blockNumber,\n    transactionId,\n    fieldName,\n    fieldValue\n  ) {\n    if (\n      JSON.stringify(chain[blockNumber]['data'][transactionId][fieldName]) ===\n      JSON.stringify(fieldValue)\n    ) {\n      return;\n    }\n    setChain((draft) => {\n      draft[blockNumber]['data'][transactionId][fieldName] = fieldValue;\n    });\n  }\n\n  function getBlockchainBlocks() {\n    return chain.map((block) => {\n      console.log(block);\n      if (block.blockNumber === 0) {\n        return (\n          <TransactionsBlock\n            {...block}\n            updateChainValue={updateChainValue}\n            updateTransactionValue={updateTransactionValue}\n          />\n        );\n      }\n      const previousHashValue = chain[block.blockNumber - 1].hash;\n      return (\n        <TransactionsBlock\n          {...block}\n          previousHash={previousHashValue}\n          updateTransactionValue={updateTransactionValue}\n          updateChainValue={updateChainValue}\n        />\n      );\n    });\n  }\n  return (\n    <>\n      <Heading mb='10' mt='10'>\n        Transactions\n      </Heading>\n\n      <Grid maxW='100%' overflowX='scroll' templateColumns='repeat(5, 1fr)'>\n        {getBlockchainBlocks()}\n      </Grid>\n    </>\n  );\n}\n\nexport default Transactions;\n","import { Button } from '@chakra-ui/button';\nimport { LinkIcon, LockIcon, UnlockIcon } from '@chakra-ui/icons';\nimport { InputLeftElement } from '@chakra-ui/input';\nimport { InputGroup } from '@chakra-ui/input';\nimport { Input } from '@chakra-ui/input';\nimport { Container } from '@chakra-ui/layout';\nimport { Box } from '@chakra-ui/layout';\nimport { Text } from '@chakra-ui/layout';\nimport { Heading } from '@chakra-ui/layout';\nimport React, { useEffect, useState } from 'react';\nimport { getSecp256Keys } from '../../blockchain/util/wallet';\n\nfunction WalletWithTransactions({ updateWalletData }) {\n  const [publicKey, setPublicKey] = useState('');\n  const [privateKey, setPrivateKey] = useState('');\n\n  useEffect(() => {\n    updateWalletData('publicKey', publicKey);\n    updateWalletData('privateKey', privateKey);\n  }, [publicKey, privateKey]);\n\n  function handleCreateWallet() {\n    const { publicKey, privateKey } = getSecp256Keys();\n    console.log('publicKey: ', publicKey);\n    console.log('privateKey: ', privateKey);\n    setPublicKey(publicKey);\n    setPrivateKey(privateKey);\n  }\n\n  return (\n    <Container maxW='80%' mt='3'>\n      <Heading mb='3'>Wallet</Heading>\n      <Box bg='green.100' padding='6' borderRadius='md'>\n        <Text>Public Key:</Text>\n        <InputGroup>\n          <InputLeftElement\n            pointerEvents='none'\n            children={<UnlockIcon color='gray.300' />}\n          />\n          <Input bg='white' mb='2' value={publicKey} />\n        </InputGroup>\n        <Text>Private Key:</Text>\n        <InputGroup>\n          <InputLeftElement\n            pointerEvents='none'\n            children={<LockIcon color='gray.300' />}\n          />\n          <Input bg='white' mb='2' value={privateKey} />\n        </InputGroup>\n        <Button\n          colorScheme='blue'\n          rightIcon={<LinkIcon />}\n          onClick={handleCreateWallet}\n        >\n          Create Wallet\n        </Button>\n      </Box>\n    </Container>\n  );\n}\n\nexport default WalletWithTransactions;\n","import React from 'react';\nimport { Input } from '@chakra-ui/input';\nimport { InputLeftElement } from '@chakra-ui/input';\nimport { InputGroup } from '@chakra-ui/input';\nimport { HStack } from '@chakra-ui/layout';\nimport { StatDownArrow } from '@chakra-ui/stat';\nimport { StatUpArrow } from '@chakra-ui/stat';\n\nfunction TransactionWallet({ updateValue, transaction }) {\n  const { amount, to, from, id } = transaction;\n  return (\n    <HStack spacing='1'>\n      <InputGroup>\n        <InputLeftElement\n          pointerEvents='none'\n          color='gray.300'\n          fontSize='1.2em'\n          children='$'\n        />\n        <Input\n          placeholder='Amount'\n          value={amount}\n          onChange={(e) => updateValue(id, 'amount', Number(e.target.value))}\n        />\n      </InputGroup>\n      <InputGroup>\n        <InputLeftElement\n          pointerEvents='none'\n          color='gray.300'\n          fontSize='1.2em'\n          children={<StatUpArrow color='gray.300' />}\n        />\n        <Input\n          placeholder='from'\n          value={from}\n          onChange={(e) => updateValue(id, 'from', e.target.value)}\n        />\n      </InputGroup>\n      <InputGroup>\n        <InputLeftElement\n          pointerEvents='none'\n          color='gray.300'\n          fontSize='1.2em'\n          children={<StatDownArrow color='gray.300' />}\n        />\n        <Input\n          placeholder='to'\n          value={to}\n          onChange={(e) => updateValue(id, 'to', e.target.value)}\n        />\n      </InputGroup>\n    </HStack>\n  );\n}\n\nexport default TransactionWallet;\n","import { Box } from '@chakra-ui/layout';\nimport React from 'react';\nimport Transaction from './TransactionWallet';\n\nfunction TransactionsListWallet({ updateTransactionValue, transactions }) {\n  function updateValue(id, name, value) {\n    updateTransactionValue(id, name, value);\n  }\n  return (\n    <Box bg='white' borderRadius='md' p='1'>\n      {transactions.map((transaction) => (\n        <Transaction transaction={transaction} updateValue={updateValue} />\n      ))}\n    </Box>\n  );\n}\n\nexport default TransactionsListWallet;\n","import { Button } from '@chakra-ui/button';\nimport { Input } from '@chakra-ui/input';\nimport { Container } from '@chakra-ui/layout';\nimport { Box } from '@chakra-ui/layout';\nimport { Text } from '@chakra-ui/layout';\nimport { Heading } from '@chakra-ui/layout';\nimport { Textarea } from '@chakra-ui/textarea';\nimport React, { useState } from 'react';\nimport { signTransaction } from '../../blockchain/util/wallet';\nimport TransactionsListWallet from './TransactionsListWallet';\n\nfunction WalletSignWithTransactions({\n  walletData,\n  updateWalletData,\n  updateTransactionValue,\n}) {\n  function handleSignTransaction() {\n    const sign = signTransaction(walletData.privateKey, walletData.data);\n    console.log('sign', sign);\n    updateWalletData('signature', sign);\n  }\n\n  return (\n    <Container maxW='80%' mt='3'>\n      <Heading mb='3'>Sign Transaction</Heading>\n      <Box bg='green.100' padding='6' borderRadius='md'>\n        <Text>Transactions:</Text>\n        <TransactionsListWallet\n          transactions={walletData.data}\n          updateTransactionValue={updateTransactionValue}\n        />\n        <Text>Private Key:</Text>\n        <Input bg='white' mb='2' value={walletData.privateKey} />\n        <Button colorScheme='blue' onClick={handleSignTransaction}>\n          Sign Transaction\n        </Button>\n        <Text mt='2'>Signature:</Text>\n        <Input bg='white' mb='2' value={walletData.signature} />\n      </Box>\n    </Container>\n  );\n}\n\nexport default WalletSignWithTransactions;\n","import { Button } from '@chakra-ui/button';\nimport { Input } from '@chakra-ui/input';\nimport { Container } from '@chakra-ui/layout';\nimport { Box } from '@chakra-ui/layout';\nimport { Text } from '@chakra-ui/layout';\nimport { Heading } from '@chakra-ui/layout';\nimport React, { useState } from 'react';\nimport { verifyTransaction } from '../../blockchain/util/wallet';\nimport TransactionsListWallet from './TransactionsListWallet';\n\nfunction WalletVerifyWithTransactions({\n  walletData,\n  updateWalletData,\n  updateTransactionValue,\n}) {\n  const [isValid, setIsValid] = useState(false);\n\n  function handleVerify() {\n    const signResult = verifyTransaction({\n      data: walletData.data,\n      publicKey: walletData.publicKey,\n      signature: walletData.signature,\n    });\n    setIsValid(signResult);\n  }\n\n  return (\n    <Container maxW='80%' mt='3'>\n      <Heading mb='3'>Verify Transaction</Heading>\n      <Box bg={isValid ? 'green.100' : 'red.100'} padding='6' borderRadius='md'>\n        <Text>Transactions:</Text>\n        <TransactionsListWallet\n          transactions={walletData.data}\n          updateTransactionValue={updateTransactionValue}\n        />\n        <Text>Public Key:</Text>\n        <Input\n          bg='white'\n          mb='2'\n          value={walletData.publicKey}\n          onChange={(e) => updateWalletData('publicKey', e.target.value)}\n        />\n        <Text>Signature:</Text>\n        <Input\n          bg='white'\n          mb='2'\n          value={walletData.signature}\n          onChange={(e) => updateWalletData('signature', e.target.value)}\n        />\n        <Button colorScheme='blue' onClick={handleVerify}>\n          Verify Signature\n        </Button>\n      </Box>\n    </Container>\n  );\n}\n\nexport default WalletVerifyWithTransactions;\n","import React from 'react';\nimport { useImmer } from 'use-immer';\nimport Wallet from './WalletWithTransactions';\nimport WalletSign from './WalletSignWithTransactions';\nimport WalletVerify from './WalletVerifyWithTransactions';\n\nfunction WalletSignAndVerifyWithTransactions() {\n  const [walletData, setWalletData] = useImmer({\n    publicKey: '',\n    privateKey: '',\n    data: [\n      {\n        amount: 1,\n        to: 'you',\n        from: 'me',\n        id: 0,\n      },\n      {\n        amount: 3,\n        to: 'me',\n        from: 'you',\n        id: 1,\n      },\n    ],\n    signature: '',\n    isSignatureValid: false,\n  });\n  function updateWalletData(field, value) {\n    setWalletData((draft) => {\n      draft[field] = value;\n    });\n  }\n\n  function updateTransactionValue(transactionId, fieldName, fieldValue) {\n    if (\n      JSON.stringify(walletData['data'][transactionId][fieldName]) ===\n      JSON.stringify(fieldValue)\n    ) {\n      return;\n    }\n    setWalletData((draft) => {\n      draft['data'][transactionId][fieldName] = fieldValue;\n    });\n  }\n\n  return (\n    <>\n      <Wallet updateWalletData={updateWalletData} />\n      <WalletSign\n        walletData={walletData}\n        updateWalletData={updateWalletData}\n        updateTransactionValue={updateTransactionValue}\n      />\n      <WalletVerify\n        walletData={walletData}\n        updateWalletData={updateWalletData}\n        updateTransactionValue={updateTransactionValue}\n      />\n    </>\n  );\n}\n\nexport default WalletSignAndVerifyWithTransactions;\n","import { Button } from '@chakra-ui/button';\nimport { FormControl } from '@chakra-ui/form-control';\nimport { Input } from '@chakra-ui/input';\nimport { ModalContent } from '@chakra-ui/modal';\nimport { ModalCloseButton } from '@chakra-ui/modal';\nimport { ModalFooter } from '@chakra-ui/modal';\nimport { ModalBody } from '@chakra-ui/modal';\nimport { ModalHeader } from '@chakra-ui/modal';\nimport { ModalOverlay } from '@chakra-ui/modal';\nimport { Modal } from '@chakra-ui/modal';\nimport React, { useRef, useState } from 'react';\nimport { signTransaction } from '../../blockchain/util/wallet';\n\nfunction PrivateKeyModal({\n  isOpen,\n  onOpen,\n  onClose,\n  transaction,\n  updateValue,\n}) {\n  const [privateKey, setPrivateKey] = useState('');\n  const initialRef = useRef();\n  function handleSign() {\n    const tempTransaction = { ...transaction };\n    delete tempTransaction.signed;\n    const signed = signTransaction(privateKey, tempTransaction);\n    updateValue(transaction.id, 'signed', signed);\n    onClose();\n  }\n  return (\n    <Modal isOpen={isOpen} initialFocusRef={initialRef}>\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader>Sign your transaction</ModalHeader>\n        <ModalBody>\n          <FormControl>\n            <Input\n              onChange={(e) => setPrivateKey(e.target.value)}\n              value={privateKey}\n              ref={initialRef}\n              placeholder='Enter your private key'\n            />\n          </FormControl>\n        </ModalBody>\n        <ModalFooter>\n          <Button colorScheme='blue' mr='3' onClick={handleSign}>\n            Sign\n          </Button>\n          <Button onClick={onClose}>Cancel</Button>\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n  );\n}\n\nexport default PrivateKeyModal;\n","import React, { useEffect, useState } from 'react';\nimport { Input } from '@chakra-ui/input';\nimport { InputLeftElement } from '@chakra-ui/input';\nimport { InputGroup } from '@chakra-ui/input';\nimport { HStack } from '@chakra-ui/layout';\nimport { StatDownArrow } from '@chakra-ui/stat';\nimport { StatUpArrow } from '@chakra-ui/stat';\nimport { VStack } from '@chakra-ui/layout';\nimport { LockIcon } from '@chakra-ui/icons';\nimport { Modal } from '@chakra-ui/modal';\nimport PrivateKeyModal from './PrivateKeyModal';\nimport { useDisclosure } from '@chakra-ui/hooks';\nimport { Button } from '@chakra-ui/button';\nimport { verifyTransaction } from '../../blockchain/util/wallet';\n\nfunction Transaction({ updateValue, transaction }) {\n  const { amount, to, from, id, signed } = transaction;\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [isSignetureValid, setIsSignetureValid] = useState(false);\n  useEffect(() => {\n    const data = { ...transaction };\n    delete data.signed;\n    const result = verifyTransaction({\n      publicKey: from,\n      data,\n      signature: signed,\n    });\n    setIsSignetureValid(result);\n  }, [signed]);\n  return (\n    <>\n      <PrivateKeyModal\n        transaction={transaction}\n        updateValue={updateValue}\n        isOpen={isOpen}\n        onClose={onClose}\n        onOpen={onOpen}\n      />\n      <VStack spacing='0' mb='2'>\n        <HStack spacing='1'>\n          <InputGroup>\n            <InputLeftElement\n              pointerEvents='none'\n              color='gray.300'\n              fontSize='1.2em'\n              children='$'\n            />\n            <Input\n              placeholder='Amount'\n              value={amount}\n              onChange={(e) =>\n                updateValue(id, 'amount', Number(e.target.value))\n              }\n            />\n          </InputGroup>\n          <InputGroup>\n            <InputLeftElement\n              pointerEvents='none'\n              color='gray.300'\n              fontSize='1.2em'\n              children={<StatUpArrow color='gray.300' />}\n            />\n            <Input\n              placeholder='from'\n              value={from}\n              onChange={(e) => updateValue(id, 'from', e.target.value)}\n            />\n          </InputGroup>\n          <InputGroup>\n            <InputLeftElement\n              pointerEvents='none'\n              color='gray.300'\n              fontSize='1.2em'\n              children={<StatDownArrow color='gray.300' />}\n            />\n            <Input\n              placeholder='to'\n              value={to}\n              onChange={(e) => updateValue(id, 'to', e.target.value)}\n            />\n          </InputGroup>\n        </HStack>\n        <InputGroup>\n          <Button leftIcon={<LockIcon />} onClick={onOpen} />\n          <Input\n            bg={isSignetureValid ? 'green.50' : 'red.50'}\n            placeholder=''\n            value={signed}\n            onChange={(e) => updateValue(id, 'signed', e.target.value)}\n          />\n        </InputGroup>\n      </VStack>\n    </>\n  );\n}\n\nexport default Transaction;\n","import { Box } from '@chakra-ui/layout';\nimport React, { useEffect } from 'react';\nimport Transaction from './Transaction';\n\nfunction TransactionsList({\n  updateTransactionValue,\n  blockNumber,\n  transactions,\n}) {\n  function updateValue(id, name, value) {\n    updateTransactionValue(blockNumber, id, name, value);\n  }\n  return (\n    <Box bg='white' borderRadius='md' p='1'>\n      {transactions.map((transaction) => (\n        <Transaction transaction={transaction} updateValue={updateValue} />\n      ))}\n    </Box>\n  );\n}\n\nexport default TransactionsList;\n","import { Button } from '@chakra-ui/button';\nimport { Input } from '@chakra-ui/input';\nimport { Container } from '@chakra-ui/layout';\nimport { Box } from '@chakra-ui/layout';\nimport { Text } from '@chakra-ui/layout';\nimport React, { useEffect, useState } from 'react';\nimport { mineBlock } from '../../blockchain/block';\nimport { DIFICULTY } from '../../blockchain/util/constants';\nimport { hashBlock } from '../../blockchain/util/hash';\nimport { verifyTransaction } from '../../blockchain/util/wallet';\nimport TransactionsList from './TransactionsList';\n\nfunction TransactionsBlock({\n  blockNumber,\n  nonce,\n  data,\n  previousHash,\n  hash,\n  updateChainValue,\n  node,\n  updateTransactionValue,\n}) {\n  const [isValid, setIsValid] = useState(false);\n  useEffect(() => {\n    const result = data.find((transaction) => {\n      const tempTransaction = { ...transaction };\n      delete tempTransaction.signed;\n      return !verifyTransaction({\n        publicKey: transaction.from,\n        data: tempTransaction,\n        signature: transaction.signed,\n      });\n    });\n    if (result) {\n      return setIsValid(false);\n    }\n    const hashedData = hashBlock({ blockNumber, nonce, data, previousHash });\n    const checkIsValid =\n      hashedData.substring(0, DIFICULTY) === '0'.repeat(DIFICULTY);\n    setIsValid(checkIsValid);\n    updateChainValue(blockNumber, 'hash', hashedData, node);\n  }, [blockNumber, nonce, data, previousHash]);\n  function handleMine() {\n    const { hashedData, nonce } = mineBlock({\n      blockNumber,\n      data,\n      previousHash,\n    });\n    updateChainValue(blockNumber, 'nonce', nonce, node);\n    updateChainValue(blockNumber, 'hash', hashedData, node);\n  }\n  return (\n    <Container maxW='80%' my='6' minW='500'>\n      <Box bg={isValid ? 'green.100' : 'red.100'} padding='6' borderRadius='md'>\n        <Text>Block Number #:</Text>\n        <Input bg='white' mb='6' value={blockNumber} />\n        <Text>nonce:</Text>\n        <Input\n          bg='white'\n          mb='6'\n          value={nonce}\n          onChange={(e) => {\n            updateChainValue(blockNumber, 'nonce', e.target.value, node);\n          }}\n        />\n        <Text>Transactions:</Text>\n        <TransactionsList\n          transactions={data}\n          blockNumber={blockNumber}\n          updateTransactionValue={updateTransactionValue}\n        />\n        {/* <Textarea\n          bg='white'\n          mb='2'\n          onChange={(e) => {\n            updateChainValue(blockNumber, 'data', e.target.value, node);\n          }}\n          value={data}\n        /> */}\n        <Text>Previous hash:</Text>\n        <Input\n          bg='white'\n          mb='6'\n          value={previousHash}\n          onChange={(e) => {\n            updateChainValue(blockNumber, 'previousHash', e.target.value, node);\n          }}\n        />\n        <Text>Hash:</Text>\n        <Input bg='white' mb='6' value={hash} />\n        <Button colorScheme='blue' onClick={handleMine}>\n          Mine\n        </Button>\n      </Box>\n    </Container>\n  );\n}\n\nexport default TransactionsBlock;\n","import { Heading } from '@chakra-ui/layout';\nimport { Grid } from '@chakra-ui/layout';\nimport React from 'react';\nimport { useImmer } from 'use-immer';\nimport TransactionsBlock from './TransactionsBlock';\nimport Wallet from '../Wallet';\n\nfunction TransactionsWallet() {\n  const [chain, setChain] = useImmer([\n    {\n      blockNumber: 0,\n      nonce: 13966,\n      data: [\n        {\n          id: 0,\n          amount: 10,\n          from: 'me',\n          to: 'you',\n          signed: '',\n        },\n        {\n          id: 1,\n          amount: 5,\n          from: 'you',\n          to: 'me',\n          signed: '',\n        },\n        {\n          id: 2,\n          amount: 1,\n          from: 'me',\n          to: 'you',\n          signed: '',\n        },\n      ],\n      previousHash: '0'.repeat(64),\n      hash: '000032ac7852203819adbcafd1ae54ee51968ffafa6c5468d2e6655c4c777e1d',\n    },\n    {\n      blockNumber: 1,\n      nonce: 161732,\n      data: [\n        {\n          id: 0,\n          amount: 9,\n          from: 'Icaro',\n          to: 'Nicolas',\n        },\n        {\n          id: 1,\n          amount: 1,\n          from: 'Nicolas',\n          to: 'Icaro',\n        },\n        {\n          id: 2,\n          amount: 12,\n          from: 'me',\n          to: 'you',\n        },\n      ],\n      previousHash: '',\n      hash: '0000b069cf12069fc3c27e4d2d0d7a178eb3a75df45c0e99a7a9234c77d4acce',\n    },\n    {\n      blockNumber: 2,\n      nonce: 7122,\n      data: [\n        {\n          id: 0,\n          amount: 7,\n          from: 'Rafaela',\n          to: 'Nicolas',\n        },\n        {\n          id: 1,\n          amount: 6,\n          from: 'Rafaela',\n          to: 'Icaro',\n        },\n        {\n          id: 2,\n          amount: 13,\n          from: 'me',\n          to: 'you',\n        },\n      ],\n      previousHash: '',\n      hash: '0000c729ba6c40884f17e4307f808515efc18c15716f445a26780242c93665ae',\n    },\n  ]);\n\n  function updateChainValue(blockNumber, fieldName, fieldValue) {\n    if (\n      JSON.stringify(chain[blockNumber][fieldName]) ===\n      JSON.stringify(fieldValue)\n    ) {\n      return;\n    }\n    setChain((draft) => {\n      draft[blockNumber][fieldName] = fieldValue;\n    });\n  }\n\n  function updateTransactionValue(\n    blockNumber,\n    transactionId,\n    fieldName,\n    fieldValue\n  ) {\n    if (\n      JSON.stringify(chain[blockNumber]['data'][transactionId][fieldName]) ===\n      JSON.stringify(fieldValue)\n    ) {\n      return;\n    }\n    setChain((draft) => {\n      draft[blockNumber]['data'][transactionId][fieldName] = fieldValue;\n    });\n  }\n\n  function getBlockchainBlocks() {\n    return chain.map((block) => {\n      console.log(block);\n      if (block.blockNumber === 0) {\n        return (\n          <TransactionsBlock\n            {...block}\n            updateChainValue={updateChainValue}\n            updateTransactionValue={updateTransactionValue}\n          />\n        );\n      }\n      const previousHashValue = chain[block.blockNumber - 1].hash;\n      return (\n        <TransactionsBlock\n          {...block}\n          previousHash={previousHashValue}\n          updateTransactionValue={updateTransactionValue}\n          updateChainValue={updateChainValue}\n        />\n      );\n    });\n  }\n  return (\n    <>\n      <Heading mb='10' mt='10'>\n        Transactions with Wallet\n      </Heading>\n\n      <Grid maxW='100%' overflowX='scroll' templateColumns='repeat(5, 1fr)'>\n        {getBlockchainBlocks()}\n      </Grid>\n      <Wallet />\n      <Wallet />\n    </>\n  );\n}\n\nexport default TransactionsWallet;\n","import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport './App.css';\nimport Block from './components/Block';\nimport Blockchain from './components/Blockchain';\nimport Distributed from './components/Distributed';\nimport Header from './components/Header';\nimport Sha256Hash from './components/Sha256Hash';\nimport WalletSignAndVerify from './components/WalletSignAndVerify';\nimport Transactions from './components/Transactions';\nimport Wallet from './components/Wallet';\nimport WalletSignAndVerifyWithTransactions from './components/WalletTransactions/WalletSignAndVerifyWithTransactions';\nimport TransactionsWallet from './components/BlockchainWithWallet/TransactionsWallet';\n\nfunction App() {\n  return (\n    <Router>\n      <Header />\n      <Switch>\n        <Route path='/sha256'>\n          <Sha256Hash />\n        </Route>\n        <Route path='/block'>\n          <Block />\n        </Route>\n        <Route path='/blockchain'>\n          <Blockchain />\n        </Route>\n        <Route path='/distributed'>\n          <Distributed />\n        </Route>\n        <Route path='/transactions'>\n          <Transactions />\n        </Route>\n        <Route path='/wallet'>\n          <Wallet />\n        </Route>\n        <Route path='/signed'>\n          <WalletSignAndVerify />\n        </Route>\n        <Route path='/wallet-transactions'>\n          <WalletSignAndVerifyWithTransactions />\n        </Route>\n        <Route path='/transactions-wallet'>\n          <TransactionsWallet />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { ChakraProvider } from '@chakra-ui/react';\nReactDOM.render(\n  <ChakraProvider>\n    <App />\n  </ChakraProvider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}